--
-- Root build.ninja solution file generator
--

local ninja = premake.actions.ninja
local solution = premake.solution
local project = premake5.project

function ninja.generate_solution(sln)
  
	_p('# %s solution build.ninja autogenerated by Premake', sln.name)
	_p('# Ninja build is available to download at http://martine.github.com/ninja/')
	_p('# Type "ninja help" for usage help')
	_p('')
	
	ninja.writeEnvironment(sln)
	local cfgs = solution.eachconfig(sln)
	ninja.writeToolsets(cfgs)
	
end

function ninja.generate_project(prj)

	local cfgs = project.eachconfig(prj)

	_p('# Project ' .. prj.name)
	ninja.writeToolsets(cfgs)
	_p('')
end

function ninja.writeEnvironment(sln)
	local arch = ""
	
	_p('# Environment settings')
	--_p('tooldir=' .. tooldir)
	_p('arch=' .. arch)
	--_p('osver=' .. osver)
	--_p('compilerVer=' .. compilerVer)
	--_p('solution=' .. solutionName)

end

-- ruleName[toolset][toolname]
local ruleNames = {}

function ninja.writeToolsets(cfgs)

	local toolsets = {}
	
	for cfg in cfgs do
		local toolsetName = cfg.toolset
		
		if toolsetName and toolsetName ~= '' then
		
	        local toolset = premake.tools[toolsetName]
			if not toolset then
				error("Invalid toolset '" .. toolsetName .. "' in config " .. cfg.shortname)
			end
	        
			local cppflags = toolset:getcmdflags(cfg, 'cpp')
			local ccflags = toolset:getcmdflags(cfg, 'cc') 
			local cxxflags = toolset:getcmdflags(cfg, 'cxx')
			
			-- The Intel ar tool outputs unwanted information to stderr. Allow the toolset to pipe it to somewhere else  
			local redirectStderr = "" 
		    if(toolset.redirectStderr) then
		      local hostIsWindows = string.find(os.getversion(), "Windows")
		      if( hostIsWindows ) then
		        redirectStderr = '2> nul'
		      else
		        redirectStderr = '2> /dev/null'
		      end
		    end	
		   
		    -- Set up rule names
		    local ruleNamePrefix = ''
		    --if( #toolsets > 1 ) then
		    	ruleNamePrefix = toolsetName .. '_'
		    --end
		    ruleNames[toolsetName] = {}
		    ruleNames[toolsetName].cc   = ruleNamePrefix .. 'cc'
		    ruleNames[toolsetName].cxx  = ruleNamePrefix .. 'cxx'
		    ruleNames[toolsetName].link = ruleNamePrefix .. 'link'
		    ruleNames[toolsetName].ar   = ruleNamePrefix .. 'ar'
			
			_p('# Toolset ' .. toolsetName)
			_p('rule ' .. ruleNames[toolsetName].cc)
				_p('  command = ' .. self:getCommandLine(cfg, 'cc', '$DEFINES $INCLUDES', '$out', '$in') )
				_p('  depfile = $out.d')
				_p('  description = ' .. ruleNames[toolsetName].cc .. ' $out')
			_p('')
			_p('rule ' .. ruleNames[toolsetName].cxx)
				_p('  command = ' .. self:getCommandLine(cfg, 'cxx', '$DEFINES $INCLUDES', '$out', '$in') )
				_p('  depfile = $out.d')
				_p('  description = ' .. ruleNames[toolsetName].cxx .. ' $out')
			_p('')
			_p('rule ' .. ruleNames[toolsetName].link)
				_p('  command = ' .. self:getCommandLine(cfg, 'link', '$LIBS $LDFLAGS', '$out', '$in') )
				_p('  description = ' .. ruleNames[toolsetName].link .. ' $out')
			_p('')
			_p('rule ' .. ruleNames[toolsetName].ar)
				_p('  command = ' .. self:getCommandLine(cfg, 'ar', '$LDFLAGS', '$out', '$in') )
				_p('  description = ' .. ruleNames[toolsetName].ar .. ' $out')
			_p('')
			_p('')
			
			_p('# Global includes')
			_p('includeFlags = -I "."')
			_p('')
			
			local cCommonFlags = table.concat(toolset:getcppflags(cfg), " ")	-- cppflags = C PreProcessor flags
			_p('cFlags = ' .. cCommonFlags .. table.concat(toolset:getcflags(cfg), " ") )
			_p('cxxFlags = ' .. cCommonFlags .. table.concat(toolset:getcxxflags(cfg), " "))
			_p('linkFlags = ' .. table.concat(table.join(toolset:getldflags(cfg), cfg.linkoptions), " ") )
			_p('arFlags = rc')
			_p('')
		
			-- C Compiler rule
			_p('# C Compiler rule')
			_p('rule cc')
			_p('  command = $ccTool $cFlags $includeFlags -o $out -MMD -MF $out.d $in' .. redirectStderr)
			_p('  depfile = $out.d')
			_p('  description = cc $out')
			_p('')
			
			-- C++ Compiler rule
			_p('# C++ Compiler rule')
			_p('rule cxx')
			_p('  command = $cxxTool $cxxFlags $includeFlags -o $out -MMD -MF $out.d $in' .. redirectStderr)
			_p('  depfile = $out.d')
			_p('  description = cc $out')
			_p('')
			
			-- Link Compiler rule
			_p('# Link rule')
			_p('rule cxx')
			_p('  command = $linkTool $linkFlags -o $out -Wl,--start-group $in -Wl,--end-group' .. redirectStderr)
			_p('  description = link $out')
			_p('')
			
			-- Archive tool rule
			_p('# Archive tool rule')
			_p('rule ar')
			_p('  command = $arTool $arFlags $out $in ' .. redirectStderr)
			_p('  description = ar $out')
			_p('')
		end 
	end
end 